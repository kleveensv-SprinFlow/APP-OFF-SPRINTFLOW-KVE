-- 20251026140000_create_sleep_data_table.sql

CREATE TABLE "public"."sleep_data" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone NOT NULL DEFAULT now(),
    "user_id" uuid NOT NULL,
    "date" date NOT NULL,
    "duration_hours" real,
    "quality_rating" smallint,
    "notes" text
);

ALTER TABLE "public"."sleep_data" OWNER TO "postgres";

ALTER TABLE "public"."sleep_data" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sleep_data_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."sleep_data"
    ADD CONSTRAINT "sleep_data_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."sleep_data"
    ADD CONSTRAINT "sleep_data_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    
ALTER TABLE "public"."sleep_data" ENABLE ROW LEVEL SECURITY;

-- Add a unique constraint on user_id and date to prevent duplicate entries for the same day
ALTER TABLE "public"."sleep_data"
    ADD CONSTRAINT "sleep_data_user_id_date_key" UNIQUE ("user_id", "date");

-- Create policies for RLS
CREATE POLICY "Enable insert for authenticated users only" ON "public"."sleep_data"
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable read access for users based on user_id" ON "public"."sleep_data"
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Enable update for users based on user_id" ON "public"."sleep_data"
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."sleep_data"
    FOR DELETE USING (auth.uid() = user_id);